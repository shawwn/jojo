#+title: core

* [todo-stack]

* [note]

* sexp

  #+begin_src cicada
  (: sexp-s set-t)
  (= sexp-s (union string-s, string-s list-s))
  #+end_src

* list

  #+begin_src cicada
  (: list-s (-- set-t -> set-t))
  (= list-s
     (sum
       (@ (: t set-t))
       (: null-c
          (-- -> t null-s))
       (: cons-c
          (-- (: car t)
              (: cdr t list-s)
           -> t cons-s))))

  (note
    example data construction
    (cons-@
      (= car zero-c)
      (= cdr null-c))
    (@
      (= car zero-c)
      (= cdr null-c))
    cons-cr
    zero-c null-c cons-c)

  (: list-length (-- t list-s -> nat-s))
  (= list-length
     (lambda
       (let list)
       (case list
         (null-s zero-c)
         (cons-s list.cdr recur succ-c))))

  (: list-append (-- t list-s t list-s -> t list-s))
  (= list-append
     (lambda
       (let ante succ)
       (case succ
         (null-s ante)
         (cons-s succ.car ante succ.cdr recur cons-c))))
  #+end_src

* ><

  #+begin_src cicada
  (: list-s (-- set-t -> set-t))
  (= list-s
     (sum
       (@ (: t set-t))
       null-c
       cons-c))

  (: null-s (-- set-t -> set-t))
  (= null-s
     (data
       (@ (: t set-t))
       (: null-c
          (-- -> t null-s))))

  (: cons-s (-- set-t -> set-t))
  (= cons-s
     (data
       (@ (: t set-t))
       (: cons-c
          (-- (: car t)
              (: cdr t list-s)
           -> t cons-s))))
  #+end_src
