#+title: core

* [todo-stack]

* [note]

* sexp

  #+begin_src cicada
  (: sexp-t set-t)
  (= sexp-t (union string-t, string-t list-t))
  #+end_src

* list

  #+begin_src cicada
  (: list-t (-- set-t -> set-t))
  (= list-t
     (sum
       (@ (: t set-t))
       (: null-c
          (-- -> t null-t))
       (: cons-c
          (-- (: car t)
              (: cdr t list-t)
           -> t cons-t))))

  (note
    example data construction
    (cons-@
      (= car zero-c)
      (= cdr null-c))
    (@
      (= car zero-c)
      (= cdr null-c))
    cons-cr
    zero-c null-c cons-c)

  (: list-length (-- t list-t -> nat-t))
  (= list-length
     (lambda
       (let list)
       (case list
         (null-t zero-c)
         (cons-t list.cdr recur succ-c))))

  (: list-append (-- t list-t t list-t -> t list-t))
  (= list-append
     (lambda
       (let ante succ)
       (case succ
         (null-t ante)
         (cons-t succ.car ante succ.cdr recur cons-c))))
  #+end_src

* ><

  #+begin_src cicada
  (: list-t (-- set-t -> set-t))
  (= list-t
     (sum
       (@ (: t set-t))
       null-c
       cons-c))

  (: null-t (-- set-t -> set-t))
  (= null-t
     (data
       (@ (: t set-t))
       (: null-c
          (-- -> t null-t))))

  (: cons-t (-- set-t -> set-t))
  (= cons-t
     (data
       (@ (: t set-t))
       (: cons-c
          (-- (: car t)
              (: cdr t list-t)
           -> t cons-t))))
  #+end_src
