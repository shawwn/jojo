#+property: tangle jojo.cpp
#+title: jojo

* [todo-stack]

*** spec the imp

*** form a coding style

*** simplify den to obj

* [note]

*** [for now] use string instead of symbol

    - to simplify the implementation
      we use string instead of symbol
      and we keep the implementation easy to change
      and add symbol back only later

* prolog

*** include

    #+begin_src cpp
    #include <iostream>
    #include <vector>
    #include <map>
    #include <set>
    #include <stack>
    #+end_src

*** using

    #+begin_src cpp
    using namespace std;
    #+end_src

* name

*** name_t

    #+begin_src cpp
    using name_t = string;
    #+end_src

* env

*** env_t

    #+begin_src cpp
    struct obj_t;
    struct frame_t;

    struct env_t
    {
        map<name_t, obj_t> name_map;
        stack<obj_t> obj_stack;
        stack<frame_t> frame_stack;
        void step ();
        void eval ();
    };
    #+end_src

*** body_t

    #+begin_src cpp
    struct ins_t;

    using body_t = vector<ins_t>;
    #+end_src

*** frame_t

    #+begin_src cpp
    struct frame_t
    {
       size_t index;
       body_t body;
       map<name_t, obj_t> local_map;
    };
    #+end_src

*** step

    #+begin_src cpp
    void env_t::step ()
    {
        // handle proper tail call here
        // obj_stack
        // frame_stack
    }
    #+end_src

*** eval

    #+begin_src cpp
    void env_t::eval ()
    {

    }
    #+end_src

* obj

*** obj_t

    #+begin_src cpp
    struct obj_t
    {

    };
    #+end_src

*** clo_obj_t

    #+begin_src cpp
    struct clo_obj_t: public obj_t
    {
        map<name_t, obj_t> local_map;
        body_t body;
    };
    #+end_src

*** int_obj_t

    #+begin_src cpp
    struct int_obj_t: public obj_t
    {
        int i;
    };
    #+end_src

*** str_obj_t

    #+begin_src cpp
    struct str_obj_t: public obj_t
    {
        string s;
    };
    #+end_src

* ins

*** ins_t

    #+begin_src cpp
    struct ins_t
    {

    };
    #+end_src

*** call_ins_t

    #+begin_src cpp
    struct call_ins_t: public ins_t
    {
        name_t name;
    };
    #+end_src

*** end_ins_t

    #+begin_src cpp
    struct end_ins_t: public ins_t
    {

    };
    #+end_src

*** get_ins_t

    #+begin_src cpp
    struct get_ins_t: public ins_t
    {
        name_t name;
    };
    #+end_src

*** let_ins_t

    #+begin_src cpp
    struct let_ins_t: public ins_t
    {
        name_t name;
    };
    #+end_src

*** clo_ins_t

    #+begin_src cpp
    struct clo_ins_t: public ins_t
    {
        body_t body;
    };
    #+end_src

* epilog

*** main

    #+begin_src cpp
    int main ()
    {

    }
    #+end_src
