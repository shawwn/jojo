#+property: tangle main.rs
#+title: jojo

* prolog

*** use

    #+begin_src rust
    use std::collections::HashMap;
    use std::rc::Rc;
    #+end_src

* datatype

*** datatype

    #+begin_src rust
    type Name = String;

    type ObjRecord = Vec <(Name, Rc <Obj>)>;
    type ObjRef = usize; // index in to ObjRecord

    type TypeRecord = Vec <(Name, Rc <Type>)>;
    type Tag = usize; // index in to TypeRecord
    type TagMap = HashMap <Tag, Name>;

    type JoVec = Vec <Box <Jo>>;

    type ObjStack = Vec <Rc <Obj>>;

    type Bind = (Name, Rc <Obj>);
    type BindVec = Vec <Bind>; // index from end
    type LocalScope = Vec <BindVec>; // index from end

    type FrameStack = Vec <Rc <Frame>>;
    #+end_src

*** Obj

    #+begin_src rust
    trait Obj {
        fn tag (&self) -> Tag;
        fn obj_map (&self) -> HashMap <Name, Rc <Obj>>;
        fn repr (&self, env: &Env) -> String;
        fn print (&self, env: &Env);
        fn eq (&self, env: &Env, obj: Rc <Obj>) -> bool;
        fn apply (&self, env: &Env, arity: usize);
        fn apply_to_arg_dict (&self, env: &Env);
    }
    #+end_src

*** Jo

    #+begin_src rust
    trait Jo {
        fn exe (&self, env: &Env, local_scope: &LocalScope);
        fn repr (&self, env: &Env) -> String;
    }
    #+end_src

*** Env

    #+begin_src rust
    struct Env {
       obj_record: ObjRecord,
       obj_stack: ObjStack,
       frame_stack: FrameStack,
       type_record: TypeRecord,
       tag_map: TagMap,
    }
    #+end_src

*** Frame

    #+begin_src rust
    struct Frame {
        index: usize,
        jojo: Rc <JoVec>,
        local_scope: LocalScope,
    }
    #+end_src

* env

  #+begin_src rust
  // fn step ();
  // fn run ();
  // fn box_map_report ();
  // fn frame_stack_report ();
  // fn obj_stack_report ();
  // fn report ();
  // fn run_with_base (size_t base);
  // fn double_report ();
  // fn step_and_report ();
  #+end_src

* type

*** Type

    #+begin_src rust
    struct Type {

    }
    #+end_src

* epilog

*** main

    #+begin_src rust
    fn main () {
        println! ("jojo!");
    }
    #+end_src
