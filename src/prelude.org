#+title: prelude

* [todo-stack]

* [note]

* sexp

  #+begin_src cicada
  (: sexp-t type-t)
  (= sexp-t (+ string-t | string-t list-t))
  #+end_src

* list

  #+begin_src cicada
  (: list-t (-- type-t -> type-t))
  (= list-t (+ null-t | cons-t))

  (: null-t (-- type-t -> type-t))
  (= null-t
     (type
       (@ t : type-t)))

  (: cons-t (-- type-t -> type-t))
  (= cons-t
     (type
       (@ t : type-t)
       (: car t)
       (: cdr t list-t)))

  (cons-@
    (= car zero-c)
    (= cdr null-c))

  (@
    (= car zero-c)
    (= cdr null-c))
  cons-cr

  (: list-length (-- t list-t -> nat-t))
  (= list-length
     (lambda
        (let list)
        (case list
          (null-t zero-c)
          (cons-t list.cdr recur succ-c))))

  (: list-append (-- t list-t t list-t -> t list-t))
  (= list-append
     (lambda
        (let ante succ)
        (case succ
          (null-t ante)
          (cons-t succ.car ante succ.cdr recur cons-c))))
  #+end_src
