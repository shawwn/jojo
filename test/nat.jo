(= zero-t (data))
(= succ-t (data prev))

(= zero zero-c)
(= one (succ-c zero))
(= two (succ-c one))
(= three (succ-c two))
(= four (succ-c three))

(= (nat-add x y)
   (case x
     (zero-t y)
     (succ-t (succ-c (recur x.prev y)))))

(= (nat-mul x y)
   (case x
     (zero-t zero-c)
     (succ-t (nat-add y (recur x.prev y)))))

(= (nat-factorial x)
   (case x
     (zero-t (succ-c zero-c))
     (succ-t (nat-mul x (recur x.prev)))))

(assert (equal (nat-add two two) four))
(assert (equal (nat-mul two two) four))

(= (succ.inc)
   (nat-add this one))

(assert (equal (one.inc) two))
(assert (equal (two.inc) three))
