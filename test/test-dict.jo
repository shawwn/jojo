(= d {a: (cons-c 1 null-c)
      b: (cons-c 1 (cons-c 2 null-c))})

(assert (eq (type-of d) dict-t))
(assert (eq d.a.car 1))
(assert (eq d.b.cdr.car 2))

(= d {a: '(1)
      b: '(1 2)})

(assert (eq (type-of d) dict-t))
(assert (eq d.a.car 1))
(assert (eq d.b.cdr.car 2))

(assert (eq (list-to-dict '(a b c d))
            {a: "b" c: "d"}))

(assert (eq (list-to-dict
              (dict-to-list {a: "b" c: "d"}))
            {a: "b" c: "d"}))

(assert (eq (dict-length {a: "b" c: "d"}) 2))

(note
  (match (dict-find dict key)
    (nothing-t ...)
    ((just-c value) ...)))

(note
  (let [(found (dict-find dict key))]
    (case found
      (nothing-t ...)
      (just-t found.value ))))
