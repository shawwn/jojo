(= zero-t (data))
(= succ-t (data prev))

(= zero zero-c)
(= one (succ-c zero))
(= two (succ-c one))
(= three (succ-c two))
(= four (succ-c three))

(assert (eq data-pred-t (type-of zero-p)))
(assert (eq data-pred-t (type-of succ-p)))

(assert (zero-p zero))
(assert (succ-p one))
(assert (succ-p two))
(assert (succ-p three))
(assert (succ-p four))

(assert (not (succ-p zero)))
(assert (not (zero-p one)))
(assert (not (zero-p two)))
(assert (not (zero-p three)))
(assert (not (zero-p four)))


(assert (data-pred-p null-p))
(assert (null-p null-c))

(assert (data-pred-p data-cons-p))
(assert (data-cons-p cons-c))
(assert (data-cons-p (cons-c null-c)))

(assert (data-pred-p prim-p))
(assert (prim-p println))

(assert (data-pred-p closure-p))
(assert (closure-p (lambda [x] x)))
