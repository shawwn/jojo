  (= zero-t (data))
  (= succ-t (data prev))

  (= (nat-add x y) )

  (= (nat-mul x y) )

  (= (nat-factorial x) )
  (= null-t (data))
  (= cons-t (data car cdr))

  (cons-c zero-c null-c)

  (= (list-length list)
     (case list
       (null-t zero-c)
       (cons-t (succ-c (recur list.cdr)))))

  (= (list-append ante succ)
     (case ante
       (null-t succ)
       (cons-t (cons-c ante.car (recur ante.cdr succ)))))
